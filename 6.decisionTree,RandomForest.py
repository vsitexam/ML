# -*- coding: utf-8 -*-
"""ML6 - Decision Tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kc17_R1c5IdJq4xfQrnXNOyu-tzU1Nnl
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

df = pd.read_csv("/content/WA_Fn-UseC_-HR-Employee-Attrition.csv")
df.head()

sns.countplot(x='Attrition', data=df)

from pandas.core.arrays import categorical
df.drop(['EmployeeCount','EmployeeNumber', 'Over18', 'StandardHours'], axis="columns", inplace=True)
categorical_col = []
for column in df.columns:
  if df[column].dtype == object:
    categorical_col.append(column)
df

df['Attrition'] = df.Attrition.astype("category").cat.codes
df

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

for column in categorical_col:
  df[column] = LabelEncoder().fit_transform(df[column])

X = df.drop('Attrition', axis=1)
y = df.Attrition
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
def print_score(clf, X_train, y_train, X_test, y_test, train=True):
  if train:
    pred = clf.predict(X_train)
    clf_report = pd.DataFrame(classification_report(y_train, pred, output_dict=True))
    print(f"Accuracy Score: {accuracy_score(y_train, pred) * 100:.2f}%")
    print(f"CLASSIFICATION REPORT:\n{clf_report}")
    print(f"Confusion Matrix: \n{confusion_matrix(y_train, pred)}\n")
  elif train==False:
    pred = clf.predict(X_test)
    clf_report = pd.DataFrame(classification_report(y_test, pred, output_dict=True))
    print("results")
    print(f"Accuracy Score: {accuracy_score(y_test, pred) * 100:.2f}%")
    print(f"CLASSIFICATION REPORT:\n{clf_report}")
    print(f"Confusion Matrix: \n{confusion_matrix(y_test, pred)}\n")

from pickle import TRUE
from sklearn.tree import DecisionTreeClassifier
tree_clf = DecisionTreeClassifier()
tree_clf.fit(X_train, y_train)
print_score(tree_clf, X_train,y_train, X_test, y_test, train=True)
print_score(tree_clf, X_train,y_train, X_test, y_test, train=False)

from sklearn.ensemble import RandomForestClassifier

rf_clf = RandomForestClassifier()
rf_clf.fit(X_train, y_train)

print_score(rf_clf, X_train, y_train, X_test, y_test, train=True)
print_score(rf_clf, X_train, y_train, X_test, y_test, train=False)